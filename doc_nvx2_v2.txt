    Binary Mesh Fileformat(.nvx2):

    @verbatim
    uint magic = 'NVX2'
    int numGroups;
    int numVertices;
    int vertexWidth;
    int numTriangles;
    int numEdges
    int vertexComponents:   one bit set for each vertex component
        Coord    = (1<<0)
        Normal   = (1<<1)
        Uv0      = (1<<2)
        Uv1      = (1<<3)
        Uv2      = (1<<4)
        Uv3      = (1<<5)
        Color    = (1<<6)
        Tangent  = (1<<7)
        Binormal = (1<<8)
        ...

    for each group...
        int vertexRangeFirst
        int vertexRangeNum
        int firstTriangle
        int numTriangles
        int firstEdge
        int numEdges
    end

    float[] vertices;
    ushort[] indices;
    ushort[] edge [ 2 * faceIndex, 2 * vertexIndex ]
    @endverbatim


class nMesh2 : public nResource
{
public:
    enum VertexComponent
    {
        Coord    = (1<<0),
        Normal   = (1<<1),
        Uv0      = (1<<2),
        Uv1      = (1<<3),
        Uv2      = (1<<4),
        Uv3      = (1<<5),
        Color    = (1<<6),
        Tangent  = (1<<7),
        Binormal = (1<<8),
        Weights  = (1<<9),
        JIndices = (1<<10),
        Coord4   = (1<<11),

        NumVertexComponents = 12,
        AllComponents = ((1<<NumVertexComponents) - 1),
    };


inline
int
nMesh2::GetVertexWidthFromMask(int compMask)
{
    int width = 0;
    if (compMask & Coord)    width += 3;
    if (compMask & Normal)   width += 3;
    if (compMask & Uv0)      width += 2;
    if (compMask & Uv1)      width += 2;
    if (compMask & Uv2)      width += 2;
    if (compMask & Uv3)      width += 2;
    if (compMask & Color)    width += 4;
    if (compMask & Tangent)  width += 3;
    if (compMask & Binormal) width += 3;
    if (compMask & Weights)  width += 4;
    if (compMask & JIndices) width += 4;
    if (compMask & Coord4)   width += 4;

    return width;
}

inline
int
nMesh2::GetVertexComponentOffset(VertexComponent component) const
{
    int ret = 0;
    if ((Coord == component) || (Coord4 == component)) return ret;
    if (this->vertexComponentMask & Coord) ret += 3;
    else if (this->vertexComponentMask & Coord4) ret += 4;

    if (Normal == component) return ret;
    if (this->vertexComponentMask & Normal) ret += 3;

    if (Uv0 == component) return ret;
    if (this->vertexComponentMask & Uv0) ret += 2;

    if (Uv1 == component) return ret;
    if (this->vertexComponentMask & Uv1) ret += 2;

    if (Uv2 == component) return ret;
    if (this->vertexComponentMask & Uv2) ret += 2;

    if (Uv3 == component) return ret;
    if (this->vertexComponentMask & Uv3) ret += 2;

    if (Color == component) return ret;
    if (this->vertexComponentMask & Color) ret += 4;

    if (Tangent == component) return ret;
    if (this->vertexComponentMask & Tangent) ret += 3;

    if (Binormal == component) return ret;
    if (this->vertexComponentMask & Binormal) ret += 3;

    if (Weights == component) return ret;
    if (this->vertexComponentMask & Weights) ret += 4;

    if (JIndices == component) return ret;
    if (this->vertexComponentMask & JIndices) ret += 4;

    // add more components here
    n_error("Requested component('%i') was not found!\n", (int) component);
    return -1;
}